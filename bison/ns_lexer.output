State 36 conflicts: 1 shift/reduce
State 46 conflicts: 33 shift/reduce
State 47 conflicts: 33 shift/reduce
State 51 conflicts: 1 shift/reduce
State 53 conflicts: 33 shift/reduce
State 54 conflicts: 33 shift/reduce
State 88 conflicts: 1 shift/reduce
State 111 conflicts: 2 reduce/reduce
State 112 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 120 conflicts: 33 shift/reduce
State 121 conflicts: 33 shift/reduce
State 122 conflicts: 33 shift/reduce
State 123 conflicts: 33 shift/reduce
State 124 conflicts: 33 shift/reduce
State 156 conflicts: 1 shift/reduce
State 163 conflicts: 1 shift/reduce
State 164 conflicts: 1 shift/reduce
State 178 conflicts: 2 reduce/reduce
State 184 conflicts: 1 shift/reduce
State 185 conflicts: 33 shift/reduce
State 202 conflicts: 1 shift/reduce
State 217 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: /* empty */
    2        | statements

    3 statements: statements statement
    4           | statement

    5 statement: expression
    6          | declaration
    7          | fn_declaration
    8          | lambda_declaration
    9          | struct_declaration
   10          | if_statement
   11          | while_statement
   12          | for_statement
   13          | switch_statement
   14          | return_statement
   15          | break_statement
   16          | continue_statement

   17 type: I8
   18     | I16
   19     | I32
   20     | I64
   21     | U8
   22     | U16
   23     | U32
   24     | U64
   25     | F32
   26     | F64
   27     | BOOL
   28     | BYTE
   29     | STR
   30     | IDENTIFIER

   31 type_declaration: /* empty */
   32                 | ':' type

   33 declaration: LET IDENTIFIER type_declaration
   34            | LET IDENTIFIER type_declaration ASSIGN expression
   35            | CONST IDENTIFIER type_declaration
   36            | CONST IDENTIFIER type_declaration ASSIGN expression

   37 assignment_operator: ASSIGN
   38                    | ADD_ASSIGN
   39                    | SUB_ASSIGN
   40                    | MUL_ASSIGN
   41                    | DIV_ASSIGN
   42                    | MOD_ASSIGN
   43                    | BIT_AND_ASSIGN
   44                    | BIT_OR_ASSIGN
   45                    | BIT_XOR_ASSIGN
   46                    | BIT_SHL_ASSIGN
   47                    | BIT_SHR_ASSIGN

   48 athmetic_operator: ADD
   49                  | SUB
   50                  | MUL
   51                  | DIV
   52                  | MOD

   53 bitwise_operator: AND
   54                 | OR
   55                 | XOR
   56                 | SHL
   57                 | SHR

   58 logical_operator: LOGIC_AND
   59                 | LOGIC_OR

   60 comparison_operator: EQ
   61                    | NE
   62                    | LT
   63                    | GT
   64                    | LE
   65                    | GE

   66 if_statement: IF '(' expression ')' '{' program '}'
   67             | IF '(' expression ')' '{' program '}' ELSE '{' program '}'

   68 while_statement: WHILE '(' expression ')' '{' program '}'

   69 for_statement: FOR '(' expression ';' expression ';' expression ')' '{' program '}'

   70 switch_statement: SWITCH '(' expression ')' '{' cases '}'

   71 cases: cases case
   72      | case

   73 case: CASE expression ':' program
   74     | DEFAULT ':' program

   75 return_statement: RETURN expression

   76 break_statement: BREAK

   77 continue_statement: CONTINUE

   78 expression: expression '[' expression ']'
   79           | expression '(' ')'
   80           | expression '(' expression ')'
   81           | expression '?' expression ':' expression
   82           | '(' expression ')'
   83           | INT
   84           | DOUBLE
   85           | STRING
   86           | IDENTIFIER
   87           | TRUE
   88           | FALSE
   89           | NIL
   90           | ASYNC expression
   91           | AWAIT expression
   92           | expression '.' IDENTIFIER
   93           | expression '(' arguments ')'
   94           | expression '(' parameters ')' '{' program '}'
   95           | expression '(' parameters ')' '{' '}'
   96           | expression '(' ')' '{' program '}'
   97           | expression '(' ')' '{' '}'
   98           | NOT expression
   99           | BIT_INV expression
  100           | expression athmetic_operator expression
  101           | expression bitwise_operator expression
  102           | expression logical_operator expression
  103           | expression comparison_operator expression
  104           | expression assignment_operator expression

  105 arguments: arguments ',' argument
  106          | argument

  107 argument: IDENTIFIER ':' type
  108         | expression

  109 fn_declaration: FN IDENTIFIER '(' parameters ')' type_declaration '{' program '}'
  110               | FN IDENTIFIER '(' parameters ')' type_declaration '{' '}'
  111               | ASYNC FN IDENTIFIER '(' parameters ')' type_declaration '{' program '}'
  112               | ASYNC FN IDENTIFIER '(' parameters ')' type_declaration '{' '}'

  113 lambda_declaration: '{' '(' parameters ')' IN '{' program '}' '}'
  114                   | '{' '(' parameters ')' ':' type IN '{' program '}' '}'

  115 parameters: /* empty */
  116           | parameters ',' parameter
  117           | parameter

  118 parameter: IDENTIFIER
  119          | IDENTIFIER ':' type

  120 struct_declaration: STRUCT IDENTIFIER '{' '}'
  121                   | STRUCT IDENTIFIER '{' struct_fields '}'

  122 struct_fields: struct_fields struct_field
  123              | struct_field

  124 struct_field: IDENTIFIER ':' type


Terminals, with rules where they appear

$end (0) 0
'(' (40) 66 67 68 69 70 79 80 82 93 94 95 96 97 109 110 111 112 113
    114
')' (41) 66 67 68 69 70 79 80 82 93 94 95 96 97 109 110 111 112 113
    114
',' (44) 105 116
'.' (46) 92
':' (58) 32 73 74 81 107 114 119 124
';' (59) 69
'?' (63) 81
'[' (91) 78
']' (93) 78
'{' (123) 66 67 68 69 70 94 95 96 97 109 110 111 112 113 114 120 121
'}' (125) 66 67 68 69 70 94 95 96 97 109 110 111 112 113 114 120 121
error (256)
LET (258) 33 34
CONST (259) 35 36
FN (260) 109 110 111 112
STRUCT (261) 120 121
ASYNC (262) 90 111 112
AWAIT (263) 91
IF (264) 66 67
ELSE (265) 67
WHILE (266) 68
FOR (267) 69
IN (268) 113 114
RETURN (269) 75
BREAK (270) 76
CONTINUE (271) 77
TRUE (272) 87
FALSE (273) 88
NIL (274) 89
SWITCH (275) 70
CASE (276) 73
DEFAULT (277) 74
I8 (278) 17
I16 (279) 18
I32 (280) 19
I64 (281) 20
U8 (282) 21
U16 (283) 22
U32 (284) 23
U64 (285) 24
F32 (286) 25
F64 (287) 26
BOOL (288) 27
BYTE (289) 28
STR (290) 29
ADD (291) 48
SUB (292) 49
MUL (293) 50
DIV (294) 51
MOD (295) 52
BIT_INV (296) 99
NOT (297) 98
AND (298) 53
OR (299) 54
XOR (300) 55
SHL (301) 56
SHR (302) 57
LOGIC_AND (303) 58
LOGIC_OR (304) 59
EQ (305) 60
NE (306) 61
LT (307) 62
GT (308) 63
LE (309) 64
GE (310) 65
ASSIGN (311) 34 36 37
ADD_ASSIGN (312) 38
SUB_ASSIGN (313) 39
MUL_ASSIGN (314) 40
DIV_ASSIGN (315) 41
MOD_ASSIGN (316) 42
BIT_AND_ASSIGN (317) 43
BIT_OR_ASSIGN (318) 44
BIT_XOR_ASSIGN (319) 45
BIT_SHL_ASSIGN (320) 46
BIT_SHR_ASSIGN (321) 47
IDENTIFIER (322) 30 33 34 35 36 86 92 107 109 110 111 112 118 119 120
    121 124
STRING (323) 85
INT (324) 83
DOUBLE (325) 84


Nonterminals, with rules where they appear

$accept (82)
    on left: 0
program (83)
    on left: 1 2, on right: 0 66 67 68 69 73 74 94 96 109 111 113 114
statements (84)
    on left: 3 4, on right: 2 3
statement (85)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16, on right: 3 4
type (86)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30,
    on right: 32 107 114 119 124
type_declaration (87)
    on left: 31 32, on right: 33 34 35 36 109 110 111 112
declaration (88)
    on left: 33 34 35 36, on right: 6
assignment_operator (89)
    on left: 37 38 39 40 41 42 43 44 45 46 47, on right: 104
athmetic_operator (90)
    on left: 48 49 50 51 52, on right: 100
bitwise_operator (91)
    on left: 53 54 55 56 57, on right: 101
logical_operator (92)
    on left: 58 59, on right: 102
comparison_operator (93)
    on left: 60 61 62 63 64 65, on right: 103
if_statement (94)
    on left: 66 67, on right: 10
while_statement (95)
    on left: 68, on right: 11
for_statement (96)
    on left: 69, on right: 12
switch_statement (97)
    on left: 70, on right: 13
cases (98)
    on left: 71 72, on right: 70 71
case (99)
    on left: 73 74, on right: 71 72
return_statement (100)
    on left: 75, on right: 14
break_statement (101)
    on left: 76, on right: 15
continue_statement (102)
    on left: 77, on right: 16
expression (103)
    on left: 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
    96 97 98 99 100 101 102 103 104, on right: 5 34 36 66 67 68 69
    70 73 75 78 79 80 81 82 90 91 92 93 94 95 96 97 98 99 100 101 102
    103 104 108
arguments (104)
    on left: 105 106, on right: 93 105
argument (105)
    on left: 107 108, on right: 105 106
fn_declaration (106)
    on left: 109 110 111 112, on right: 7
lambda_declaration (107)
    on left: 113 114, on right: 8
parameters (108)
    on left: 115 116 117, on right: 94 95 109 110 111 112 113 114 116
parameter (109)
    on left: 118 119, on right: 116 117
struct_declaration (110)
    on left: 120 121, on right: 9
struct_fields (111)
    on left: 122 123, on right: 121 122
struct_field (112)
    on left: 124, on right: 122 123


state 0

    0 $accept: . program $end

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 25
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 1

   33 declaration: LET . IDENTIFIER type_declaration
   34            | LET . IDENTIFIER type_declaration ASSIGN expression

    IDENTIFIER  shift, and go to state 40


state 2

   35 declaration: CONST . IDENTIFIER type_declaration
   36            | CONST . IDENTIFIER type_declaration ASSIGN expression

    IDENTIFIER  shift, and go to state 41


state 3

  109 fn_declaration: FN . IDENTIFIER '(' parameters ')' type_declaration '{' program '}'
  110               | FN . IDENTIFIER '(' parameters ')' type_declaration '{' '}'

    IDENTIFIER  shift, and go to state 42


state 4

  120 struct_declaration: STRUCT . IDENTIFIER '{' '}'
  121                   | STRUCT . IDENTIFIER '{' struct_fields '}'

    IDENTIFIER  shift, and go to state 43


state 5

   90 expression: ASYNC . expression
  111 fn_declaration: ASYNC . FN IDENTIFIER '(' parameters ')' type_declaration '{' program '}'
  112               | ASYNC . FN IDENTIFIER '(' parameters ')' type_declaration '{' '}'

    FN          shift, and go to state 44
    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 46


state 6

   91 expression: AWAIT . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 47


state 7

   66 if_statement: IF . '(' expression ')' '{' program '}'
   67             | IF . '(' expression ')' '{' program '}' ELSE '{' program '}'

    '('  shift, and go to state 48


state 8

   68 while_statement: WHILE . '(' expression ')' '{' program '}'

    '('  shift, and go to state 49


state 9

   69 for_statement: FOR . '(' expression ';' expression ';' expression ')' '{' program '}'

    '('  shift, and go to state 50


state 10

   75 return_statement: RETURN . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 51


state 11

   76 break_statement: BREAK .

    $default  reduce using rule 76 (break_statement)


state 12

   77 continue_statement: CONTINUE .

    $default  reduce using rule 77 (continue_statement)


state 13

   87 expression: TRUE .

    $default  reduce using rule 87 (expression)


state 14

   88 expression: FALSE .

    $default  reduce using rule 88 (expression)


state 15

   89 expression: NIL .

    $default  reduce using rule 89 (expression)


state 16

   70 switch_statement: SWITCH . '(' expression ')' '{' cases '}'

    '('  shift, and go to state 52


state 17

   99 expression: BIT_INV . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 53


state 18

   98 expression: NOT . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 54


state 19

   86 expression: IDENTIFIER .

    $default  reduce using rule 86 (expression)


state 20

   85 expression: STRING .

    $default  reduce using rule 85 (expression)


state 21

   83 expression: INT .

    $default  reduce using rule 83 (expression)


state 22

   84 expression: DOUBLE .

    $default  reduce using rule 84 (expression)


state 23

   82 expression: '(' . expression ')'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 55


state 24

  113 lambda_declaration: '{' . '(' parameters ')' IN '{' program '}' '}'
  114                   | '{' . '(' parameters ')' ':' type IN '{' program '}' '}'

    '('  shift, and go to state 56


state 25

    0 $accept: program . $end

    $end  shift, and go to state 57


state 26

    2 program: statements .
    3 statements: statements . statement

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 2 (program)

    statement           go to state 58
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 27

    4 statements: statement .

    $default  reduce using rule 4 (statements)


state 28

    6 statement: declaration .

    $default  reduce using rule 6 (statement)


state 29

   10 statement: if_statement .

    $default  reduce using rule 10 (statement)


state 30

   11 statement: while_statement .

    $default  reduce using rule 11 (statement)


state 31

   12 statement: for_statement .

    $default  reduce using rule 12 (statement)


state 32

   13 statement: switch_statement .

    $default  reduce using rule 13 (statement)


state 33

   14 statement: return_statement .

    $default  reduce using rule 14 (statement)


state 34

   15 statement: break_statement .

    $default  reduce using rule 15 (statement)


state 35

   16 statement: continue_statement .

    $default  reduce using rule 16 (statement)


state 36

    5 statement: expression .
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    '('       [reduce using rule 5 (statement)]
    $default  reduce using rule 5 (statement)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 37

    7 statement: fn_declaration .

    $default  reduce using rule 7 (statement)


state 38

    8 statement: lambda_declaration .

    $default  reduce using rule 8 (statement)


state 39

    9 statement: struct_declaration .

    $default  reduce using rule 9 (statement)


state 40

   33 declaration: LET IDENTIFIER . type_declaration
   34            | LET IDENTIFIER . type_declaration ASSIGN expression

    ':'  shift, and go to state 97

    $default  reduce using rule 31 (type_declaration)

    type_declaration  go to state 98


state 41

   35 declaration: CONST IDENTIFIER . type_declaration
   36            | CONST IDENTIFIER . type_declaration ASSIGN expression

    ':'  shift, and go to state 97

    $default  reduce using rule 31 (type_declaration)

    type_declaration  go to state 99


state 42

  109 fn_declaration: FN IDENTIFIER . '(' parameters ')' type_declaration '{' program '}'
  110               | FN IDENTIFIER . '(' parameters ')' type_declaration '{' '}'

    '('  shift, and go to state 100


state 43

  120 struct_declaration: STRUCT IDENTIFIER . '{' '}'
  121                   | STRUCT IDENTIFIER . '{' struct_fields '}'

    '{'  shift, and go to state 101


state 44

  111 fn_declaration: ASYNC FN . IDENTIFIER '(' parameters ')' type_declaration '{' program '}'
  112               | ASYNC FN . IDENTIFIER '(' parameters ')' type_declaration '{' '}'

    IDENTIFIER  shift, and go to state 102


state 45

   90 expression: ASYNC . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 46


state 46

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   90           | ASYNC expression .
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 90 (expression)]
    SUB             [reduce using rule 90 (expression)]
    MUL             [reduce using rule 90 (expression)]
    DIV             [reduce using rule 90 (expression)]
    MOD             [reduce using rule 90 (expression)]
    AND             [reduce using rule 90 (expression)]
    OR              [reduce using rule 90 (expression)]
    XOR             [reduce using rule 90 (expression)]
    SHL             [reduce using rule 90 (expression)]
    SHR             [reduce using rule 90 (expression)]
    LOGIC_AND       [reduce using rule 90 (expression)]
    LOGIC_OR        [reduce using rule 90 (expression)]
    EQ              [reduce using rule 90 (expression)]
    NE              [reduce using rule 90 (expression)]
    LT              [reduce using rule 90 (expression)]
    GT              [reduce using rule 90 (expression)]
    LE              [reduce using rule 90 (expression)]
    GE              [reduce using rule 90 (expression)]
    ASSIGN          [reduce using rule 90 (expression)]
    ADD_ASSIGN      [reduce using rule 90 (expression)]
    SUB_ASSIGN      [reduce using rule 90 (expression)]
    MUL_ASSIGN      [reduce using rule 90 (expression)]
    DIV_ASSIGN      [reduce using rule 90 (expression)]
    MOD_ASSIGN      [reduce using rule 90 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 90 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 90 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 90 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 90 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 90 (expression)]
    '('             [reduce using rule 90 (expression)]
    '['             [reduce using rule 90 (expression)]
    '?'             [reduce using rule 90 (expression)]
    '.'             [reduce using rule 90 (expression)]
    $default        reduce using rule 90 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 47

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   91           | AWAIT expression .
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 91 (expression)]
    SUB             [reduce using rule 91 (expression)]
    MUL             [reduce using rule 91 (expression)]
    DIV             [reduce using rule 91 (expression)]
    MOD             [reduce using rule 91 (expression)]
    AND             [reduce using rule 91 (expression)]
    OR              [reduce using rule 91 (expression)]
    XOR             [reduce using rule 91 (expression)]
    SHL             [reduce using rule 91 (expression)]
    SHR             [reduce using rule 91 (expression)]
    LOGIC_AND       [reduce using rule 91 (expression)]
    LOGIC_OR        [reduce using rule 91 (expression)]
    EQ              [reduce using rule 91 (expression)]
    NE              [reduce using rule 91 (expression)]
    LT              [reduce using rule 91 (expression)]
    GT              [reduce using rule 91 (expression)]
    LE              [reduce using rule 91 (expression)]
    GE              [reduce using rule 91 (expression)]
    ASSIGN          [reduce using rule 91 (expression)]
    ADD_ASSIGN      [reduce using rule 91 (expression)]
    SUB_ASSIGN      [reduce using rule 91 (expression)]
    MUL_ASSIGN      [reduce using rule 91 (expression)]
    DIV_ASSIGN      [reduce using rule 91 (expression)]
    MOD_ASSIGN      [reduce using rule 91 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 91 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 91 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 91 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 91 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 91 (expression)]
    '('             [reduce using rule 91 (expression)]
    '['             [reduce using rule 91 (expression)]
    '?'             [reduce using rule 91 (expression)]
    '.'             [reduce using rule 91 (expression)]
    $default        reduce using rule 91 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 48

   66 if_statement: IF '(' . expression ')' '{' program '}'
   67             | IF '(' . expression ')' '{' program '}' ELSE '{' program '}'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 103


state 49

   68 while_statement: WHILE '(' . expression ')' '{' program '}'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 104


state 50

   69 for_statement: FOR '(' . expression ';' expression ';' expression ')' '{' program '}'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 105


state 51

   75 return_statement: RETURN expression .
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    '('       [reduce using rule 75 (return_statement)]
    $default  reduce using rule 75 (return_statement)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 52

   70 switch_statement: SWITCH '(' . expression ')' '{' cases '}'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 106


state 53

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
   99           | BIT_INV expression .
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 99 (expression)]
    SUB             [reduce using rule 99 (expression)]
    MUL             [reduce using rule 99 (expression)]
    DIV             [reduce using rule 99 (expression)]
    MOD             [reduce using rule 99 (expression)]
    AND             [reduce using rule 99 (expression)]
    OR              [reduce using rule 99 (expression)]
    XOR             [reduce using rule 99 (expression)]
    SHL             [reduce using rule 99 (expression)]
    SHR             [reduce using rule 99 (expression)]
    LOGIC_AND       [reduce using rule 99 (expression)]
    LOGIC_OR        [reduce using rule 99 (expression)]
    EQ              [reduce using rule 99 (expression)]
    NE              [reduce using rule 99 (expression)]
    LT              [reduce using rule 99 (expression)]
    GT              [reduce using rule 99 (expression)]
    LE              [reduce using rule 99 (expression)]
    GE              [reduce using rule 99 (expression)]
    ASSIGN          [reduce using rule 99 (expression)]
    ADD_ASSIGN      [reduce using rule 99 (expression)]
    SUB_ASSIGN      [reduce using rule 99 (expression)]
    MUL_ASSIGN      [reduce using rule 99 (expression)]
    DIV_ASSIGN      [reduce using rule 99 (expression)]
    MOD_ASSIGN      [reduce using rule 99 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 99 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 99 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 99 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 99 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 99 (expression)]
    '('             [reduce using rule 99 (expression)]
    '['             [reduce using rule 99 (expression)]
    '?'             [reduce using rule 99 (expression)]
    '.'             [reduce using rule 99 (expression)]
    $default        reduce using rule 99 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 54

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
   98           | NOT expression .
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 98 (expression)]
    SUB             [reduce using rule 98 (expression)]
    MUL             [reduce using rule 98 (expression)]
    DIV             [reduce using rule 98 (expression)]
    MOD             [reduce using rule 98 (expression)]
    AND             [reduce using rule 98 (expression)]
    OR              [reduce using rule 98 (expression)]
    XOR             [reduce using rule 98 (expression)]
    SHL             [reduce using rule 98 (expression)]
    SHR             [reduce using rule 98 (expression)]
    LOGIC_AND       [reduce using rule 98 (expression)]
    LOGIC_OR        [reduce using rule 98 (expression)]
    EQ              [reduce using rule 98 (expression)]
    NE              [reduce using rule 98 (expression)]
    LT              [reduce using rule 98 (expression)]
    GT              [reduce using rule 98 (expression)]
    LE              [reduce using rule 98 (expression)]
    GE              [reduce using rule 98 (expression)]
    ASSIGN          [reduce using rule 98 (expression)]
    ADD_ASSIGN      [reduce using rule 98 (expression)]
    SUB_ASSIGN      [reduce using rule 98 (expression)]
    MUL_ASSIGN      [reduce using rule 98 (expression)]
    DIV_ASSIGN      [reduce using rule 98 (expression)]
    MOD_ASSIGN      [reduce using rule 98 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 98 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 98 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 98 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 98 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 98 (expression)]
    '('             [reduce using rule 98 (expression)]
    '['             [reduce using rule 98 (expression)]
    '?'             [reduce using rule 98 (expression)]
    '.'             [reduce using rule 98 (expression)]
    $default        reduce using rule 98 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 55

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   82           | '(' expression . ')'
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ')'             shift, and go to state 107
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 56

  113 lambda_declaration: '{' '(' . parameters ')' IN '{' program '}' '}'
  114                   | '{' '(' . parameters ')' ':' type IN '{' program '}' '}'

    IDENTIFIER  shift, and go to state 108

    $default  reduce using rule 115 (parameters)

    parameters  go to state 109
    parameter   go to state 110


state 57

    0 $accept: program $end .

    $default  accept


state 58

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


state 59

   48 athmetic_operator: ADD .

    $default  reduce using rule 48 (athmetic_operator)


state 60

   49 athmetic_operator: SUB .

    $default  reduce using rule 49 (athmetic_operator)


state 61

   50 athmetic_operator: MUL .

    $default  reduce using rule 50 (athmetic_operator)


state 62

   51 athmetic_operator: DIV .

    $default  reduce using rule 51 (athmetic_operator)


state 63

   52 athmetic_operator: MOD .

    $default  reduce using rule 52 (athmetic_operator)


state 64

   53 bitwise_operator: AND .

    $default  reduce using rule 53 (bitwise_operator)


state 65

   54 bitwise_operator: OR .

    $default  reduce using rule 54 (bitwise_operator)


state 66

   55 bitwise_operator: XOR .

    $default  reduce using rule 55 (bitwise_operator)


state 67

   56 bitwise_operator: SHL .

    $default  reduce using rule 56 (bitwise_operator)


state 68

   57 bitwise_operator: SHR .

    $default  reduce using rule 57 (bitwise_operator)


state 69

   58 logical_operator: LOGIC_AND .

    $default  reduce using rule 58 (logical_operator)


state 70

   59 logical_operator: LOGIC_OR .

    $default  reduce using rule 59 (logical_operator)


state 71

   60 comparison_operator: EQ .

    $default  reduce using rule 60 (comparison_operator)


state 72

   61 comparison_operator: NE .

    $default  reduce using rule 61 (comparison_operator)


state 73

   62 comparison_operator: LT .

    $default  reduce using rule 62 (comparison_operator)


state 74

   63 comparison_operator: GT .

    $default  reduce using rule 63 (comparison_operator)


state 75

   64 comparison_operator: LE .

    $default  reduce using rule 64 (comparison_operator)


state 76

   65 comparison_operator: GE .

    $default  reduce using rule 65 (comparison_operator)


state 77

   37 assignment_operator: ASSIGN .

    $default  reduce using rule 37 (assignment_operator)


state 78

   38 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 38 (assignment_operator)


state 79

   39 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 39 (assignment_operator)


state 80

   40 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 40 (assignment_operator)


state 81

   41 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 41 (assignment_operator)


state 82

   42 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 42 (assignment_operator)


state 83

   43 assignment_operator: BIT_AND_ASSIGN .

    $default  reduce using rule 43 (assignment_operator)


state 84

   44 assignment_operator: BIT_OR_ASSIGN .

    $default  reduce using rule 44 (assignment_operator)


state 85

   45 assignment_operator: BIT_XOR_ASSIGN .

    $default  reduce using rule 45 (assignment_operator)


state 86

   46 assignment_operator: BIT_SHL_ASSIGN .

    $default  reduce using rule 46 (assignment_operator)


state 87

   47 assignment_operator: BIT_SHR_ASSIGN .

    $default  reduce using rule 47 (assignment_operator)


state 88

   79 expression: expression '(' . ')'
   80           | expression '(' . expression ')'
   93           | expression '(' . arguments ')'
   94           | expression '(' . parameters ')' '{' program '}'
   95           | expression '(' . parameters ')' '{' '}'
   96           | expression '(' . ')' '{' program '}'
   97           | expression '(' . ')' '{' '}'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 111
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    ')'         shift, and go to state 112

    ')'       [reduce using rule 115 (parameters)]
    $default  reduce using rule 115 (parameters)

    expression  go to state 113
    arguments   go to state 114
    argument    go to state 115
    parameters  go to state 116
    parameter   go to state 110


state 89

   78 expression: expression '[' . expression ']'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 117


state 90

   81 expression: expression '?' . expression ':' expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 118


state 91

   92 expression: expression '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 119


state 92

  104 expression: expression assignment_operator . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 120


state 93

  100 expression: expression athmetic_operator . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 121


state 94

  101 expression: expression bitwise_operator . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 122


state 95

  102 expression: expression logical_operator . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 123


state 96

  103 expression: expression comparison_operator . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 124


state 97

   32 type_declaration: ':' . type

    I8          shift, and go to state 125
    I16         shift, and go to state 126
    I32         shift, and go to state 127
    I64         shift, and go to state 128
    U8          shift, and go to state 129
    U16         shift, and go to state 130
    U32         shift, and go to state 131
    U64         shift, and go to state 132
    F32         shift, and go to state 133
    F64         shift, and go to state 134
    BOOL        shift, and go to state 135
    BYTE        shift, and go to state 136
    STR         shift, and go to state 137
    IDENTIFIER  shift, and go to state 138

    type  go to state 139


state 98

   33 declaration: LET IDENTIFIER type_declaration .
   34            | LET IDENTIFIER type_declaration . ASSIGN expression

    ASSIGN  shift, and go to state 140

    $default  reduce using rule 33 (declaration)


state 99

   35 declaration: CONST IDENTIFIER type_declaration .
   36            | CONST IDENTIFIER type_declaration . ASSIGN expression

    ASSIGN  shift, and go to state 141

    $default  reduce using rule 35 (declaration)


state 100

  109 fn_declaration: FN IDENTIFIER '(' . parameters ')' type_declaration '{' program '}'
  110               | FN IDENTIFIER '(' . parameters ')' type_declaration '{' '}'

    IDENTIFIER  shift, and go to state 108

    $default  reduce using rule 115 (parameters)

    parameters  go to state 142
    parameter   go to state 110


state 101

  120 struct_declaration: STRUCT IDENTIFIER '{' . '}'
  121                   | STRUCT IDENTIFIER '{' . struct_fields '}'

    IDENTIFIER  shift, and go to state 143
    '}'         shift, and go to state 144

    struct_fields  go to state 145
    struct_field   go to state 146


state 102

  111 fn_declaration: ASYNC FN IDENTIFIER . '(' parameters ')' type_declaration '{' program '}'
  112               | ASYNC FN IDENTIFIER . '(' parameters ')' type_declaration '{' '}'

    '('  shift, and go to state 147


state 103

   66 if_statement: IF '(' expression . ')' '{' program '}'
   67             | IF '(' expression . ')' '{' program '}' ELSE '{' program '}'
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ')'             shift, and go to state 148
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 104

   68 while_statement: WHILE '(' expression . ')' '{' program '}'
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ')'             shift, and go to state 149
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 105

   69 for_statement: FOR '(' expression . ';' expression ';' expression ')' '{' program '}'
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ';'             shift, and go to state 150
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 106

   70 switch_statement: SWITCH '(' expression . ')' '{' cases '}'
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ')'             shift, and go to state 151
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 107

   82 expression: '(' expression ')' .

    $default  reduce using rule 82 (expression)


state 108

  118 parameter: IDENTIFIER .
  119          | IDENTIFIER . ':' type

    ':'  shift, and go to state 152

    $default  reduce using rule 118 (parameter)


state 109

  113 lambda_declaration: '{' '(' parameters . ')' IN '{' program '}' '}'
  114                   | '{' '(' parameters . ')' ':' type IN '{' program '}' '}'
  116 parameters: parameters . ',' parameter

    ')'  shift, and go to state 153
    ','  shift, and go to state 154


state 110

  117 parameters: parameter .

    $default  reduce using rule 117 (parameters)


state 111

   86 expression: IDENTIFIER .
  107 argument: IDENTIFIER . ':' type
  118 parameter: IDENTIFIER .
  119          | IDENTIFIER . ':' type

    ':'  shift, and go to state 155

    ')'       reduce using rule 86 (expression)
    ')'       [reduce using rule 118 (parameter)]
    ','       reduce using rule 86 (expression)
    ','       [reduce using rule 118 (parameter)]
    $default  reduce using rule 86 (expression)


state 112

   79 expression: expression '(' ')' .
   96           | expression '(' ')' . '{' program '}'
   97           | expression '(' ')' . '{' '}'

    '{'  shift, and go to state 156

    '{'       [reduce using rule 79 (expression)]
    $default  reduce using rule 79 (expression)


state 113

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   80           | expression '(' expression . ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression
  108 argument: expression .

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ')'             shift, and go to state 157
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ')'       [reduce using rule 108 (argument)]
    $default  reduce using rule 108 (argument)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 114

   93 expression: expression '(' arguments . ')'
  105 arguments: arguments . ',' argument

    ')'  shift, and go to state 158
    ','  shift, and go to state 159


state 115

  106 arguments: argument .

    $default  reduce using rule 106 (arguments)


state 116

   94 expression: expression '(' parameters . ')' '{' program '}'
   95           | expression '(' parameters . ')' '{' '}'
  116 parameters: parameters . ',' parameter

    ')'  shift, and go to state 160
    ','  shift, and go to state 154


state 117

   78 expression: expression . '[' expression ']'
   78           | expression '[' expression . ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    ']'             shift, and go to state 161
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 118

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   81           | expression '?' expression . ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    ':'             shift, and go to state 162
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 119

   92 expression: expression '.' IDENTIFIER .

    $default  reduce using rule 92 (expression)


state 120

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression
  104           | expression assignment_operator expression .

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 104 (expression)]
    SUB             [reduce using rule 104 (expression)]
    MUL             [reduce using rule 104 (expression)]
    DIV             [reduce using rule 104 (expression)]
    MOD             [reduce using rule 104 (expression)]
    AND             [reduce using rule 104 (expression)]
    OR              [reduce using rule 104 (expression)]
    XOR             [reduce using rule 104 (expression)]
    SHL             [reduce using rule 104 (expression)]
    SHR             [reduce using rule 104 (expression)]
    LOGIC_AND       [reduce using rule 104 (expression)]
    LOGIC_OR        [reduce using rule 104 (expression)]
    EQ              [reduce using rule 104 (expression)]
    NE              [reduce using rule 104 (expression)]
    LT              [reduce using rule 104 (expression)]
    GT              [reduce using rule 104 (expression)]
    LE              [reduce using rule 104 (expression)]
    GE              [reduce using rule 104 (expression)]
    ASSIGN          [reduce using rule 104 (expression)]
    ADD_ASSIGN      [reduce using rule 104 (expression)]
    SUB_ASSIGN      [reduce using rule 104 (expression)]
    MUL_ASSIGN      [reduce using rule 104 (expression)]
    DIV_ASSIGN      [reduce using rule 104 (expression)]
    MOD_ASSIGN      [reduce using rule 104 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 104 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 104 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 104 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 104 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 104 (expression)]
    '('             [reduce using rule 104 (expression)]
    '['             [reduce using rule 104 (expression)]
    '?'             [reduce using rule 104 (expression)]
    '.'             [reduce using rule 104 (expression)]
    $default        reduce using rule 104 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 121

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  100           | expression athmetic_operator expression .
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 100 (expression)]
    SUB             [reduce using rule 100 (expression)]
    MUL             [reduce using rule 100 (expression)]
    DIV             [reduce using rule 100 (expression)]
    MOD             [reduce using rule 100 (expression)]
    AND             [reduce using rule 100 (expression)]
    OR              [reduce using rule 100 (expression)]
    XOR             [reduce using rule 100 (expression)]
    SHL             [reduce using rule 100 (expression)]
    SHR             [reduce using rule 100 (expression)]
    LOGIC_AND       [reduce using rule 100 (expression)]
    LOGIC_OR        [reduce using rule 100 (expression)]
    EQ              [reduce using rule 100 (expression)]
    NE              [reduce using rule 100 (expression)]
    LT              [reduce using rule 100 (expression)]
    GT              [reduce using rule 100 (expression)]
    LE              [reduce using rule 100 (expression)]
    GE              [reduce using rule 100 (expression)]
    ASSIGN          [reduce using rule 100 (expression)]
    ADD_ASSIGN      [reduce using rule 100 (expression)]
    SUB_ASSIGN      [reduce using rule 100 (expression)]
    MUL_ASSIGN      [reduce using rule 100 (expression)]
    DIV_ASSIGN      [reduce using rule 100 (expression)]
    MOD_ASSIGN      [reduce using rule 100 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 100 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 100 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 100 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 100 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 100 (expression)]
    '('             [reduce using rule 100 (expression)]
    '['             [reduce using rule 100 (expression)]
    '?'             [reduce using rule 100 (expression)]
    '.'             [reduce using rule 100 (expression)]
    $default        reduce using rule 100 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 122

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  101           | expression bitwise_operator expression .
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 101 (expression)]
    SUB             [reduce using rule 101 (expression)]
    MUL             [reduce using rule 101 (expression)]
    DIV             [reduce using rule 101 (expression)]
    MOD             [reduce using rule 101 (expression)]
    AND             [reduce using rule 101 (expression)]
    OR              [reduce using rule 101 (expression)]
    XOR             [reduce using rule 101 (expression)]
    SHL             [reduce using rule 101 (expression)]
    SHR             [reduce using rule 101 (expression)]
    LOGIC_AND       [reduce using rule 101 (expression)]
    LOGIC_OR        [reduce using rule 101 (expression)]
    EQ              [reduce using rule 101 (expression)]
    NE              [reduce using rule 101 (expression)]
    LT              [reduce using rule 101 (expression)]
    GT              [reduce using rule 101 (expression)]
    LE              [reduce using rule 101 (expression)]
    GE              [reduce using rule 101 (expression)]
    ASSIGN          [reduce using rule 101 (expression)]
    ADD_ASSIGN      [reduce using rule 101 (expression)]
    SUB_ASSIGN      [reduce using rule 101 (expression)]
    MUL_ASSIGN      [reduce using rule 101 (expression)]
    DIV_ASSIGN      [reduce using rule 101 (expression)]
    MOD_ASSIGN      [reduce using rule 101 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 101 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 101 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 101 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 101 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 101 (expression)]
    '('             [reduce using rule 101 (expression)]
    '['             [reduce using rule 101 (expression)]
    '?'             [reduce using rule 101 (expression)]
    '.'             [reduce using rule 101 (expression)]
    $default        reduce using rule 101 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 123

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  102           | expression logical_operator expression .
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 102 (expression)]
    SUB             [reduce using rule 102 (expression)]
    MUL             [reduce using rule 102 (expression)]
    DIV             [reduce using rule 102 (expression)]
    MOD             [reduce using rule 102 (expression)]
    AND             [reduce using rule 102 (expression)]
    OR              [reduce using rule 102 (expression)]
    XOR             [reduce using rule 102 (expression)]
    SHL             [reduce using rule 102 (expression)]
    SHR             [reduce using rule 102 (expression)]
    LOGIC_AND       [reduce using rule 102 (expression)]
    LOGIC_OR        [reduce using rule 102 (expression)]
    EQ              [reduce using rule 102 (expression)]
    NE              [reduce using rule 102 (expression)]
    LT              [reduce using rule 102 (expression)]
    GT              [reduce using rule 102 (expression)]
    LE              [reduce using rule 102 (expression)]
    GE              [reduce using rule 102 (expression)]
    ASSIGN          [reduce using rule 102 (expression)]
    ADD_ASSIGN      [reduce using rule 102 (expression)]
    SUB_ASSIGN      [reduce using rule 102 (expression)]
    MUL_ASSIGN      [reduce using rule 102 (expression)]
    DIV_ASSIGN      [reduce using rule 102 (expression)]
    MOD_ASSIGN      [reduce using rule 102 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 102 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 102 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 102 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 102 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 102 (expression)]
    '('             [reduce using rule 102 (expression)]
    '['             [reduce using rule 102 (expression)]
    '?'             [reduce using rule 102 (expression)]
    '.'             [reduce using rule 102 (expression)]
    $default        reduce using rule 102 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 124

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  103           | expression comparison_operator expression .
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 103 (expression)]
    SUB             [reduce using rule 103 (expression)]
    MUL             [reduce using rule 103 (expression)]
    DIV             [reduce using rule 103 (expression)]
    MOD             [reduce using rule 103 (expression)]
    AND             [reduce using rule 103 (expression)]
    OR              [reduce using rule 103 (expression)]
    XOR             [reduce using rule 103 (expression)]
    SHL             [reduce using rule 103 (expression)]
    SHR             [reduce using rule 103 (expression)]
    LOGIC_AND       [reduce using rule 103 (expression)]
    LOGIC_OR        [reduce using rule 103 (expression)]
    EQ              [reduce using rule 103 (expression)]
    NE              [reduce using rule 103 (expression)]
    LT              [reduce using rule 103 (expression)]
    GT              [reduce using rule 103 (expression)]
    LE              [reduce using rule 103 (expression)]
    GE              [reduce using rule 103 (expression)]
    ASSIGN          [reduce using rule 103 (expression)]
    ADD_ASSIGN      [reduce using rule 103 (expression)]
    SUB_ASSIGN      [reduce using rule 103 (expression)]
    MUL_ASSIGN      [reduce using rule 103 (expression)]
    DIV_ASSIGN      [reduce using rule 103 (expression)]
    MOD_ASSIGN      [reduce using rule 103 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 103 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 103 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 103 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 103 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 103 (expression)]
    '('             [reduce using rule 103 (expression)]
    '['             [reduce using rule 103 (expression)]
    '?'             [reduce using rule 103 (expression)]
    '.'             [reduce using rule 103 (expression)]
    $default        reduce using rule 103 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 125

   17 type: I8 .

    $default  reduce using rule 17 (type)


state 126

   18 type: I16 .

    $default  reduce using rule 18 (type)


state 127

   19 type: I32 .

    $default  reduce using rule 19 (type)


state 128

   20 type: I64 .

    $default  reduce using rule 20 (type)


state 129

   21 type: U8 .

    $default  reduce using rule 21 (type)


state 130

   22 type: U16 .

    $default  reduce using rule 22 (type)


state 131

   23 type: U32 .

    $default  reduce using rule 23 (type)


state 132

   24 type: U64 .

    $default  reduce using rule 24 (type)


state 133

   25 type: F32 .

    $default  reduce using rule 25 (type)


state 134

   26 type: F64 .

    $default  reduce using rule 26 (type)


state 135

   27 type: BOOL .

    $default  reduce using rule 27 (type)


state 136

   28 type: BYTE .

    $default  reduce using rule 28 (type)


state 137

   29 type: STR .

    $default  reduce using rule 29 (type)


state 138

   30 type: IDENTIFIER .

    $default  reduce using rule 30 (type)


state 139

   32 type_declaration: ':' type .

    $default  reduce using rule 32 (type_declaration)


state 140

   34 declaration: LET IDENTIFIER type_declaration ASSIGN . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 163


state 141

   36 declaration: CONST IDENTIFIER type_declaration ASSIGN . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 164


state 142

  109 fn_declaration: FN IDENTIFIER '(' parameters . ')' type_declaration '{' program '}'
  110               | FN IDENTIFIER '(' parameters . ')' type_declaration '{' '}'
  116 parameters: parameters . ',' parameter

    ')'  shift, and go to state 165
    ','  shift, and go to state 154


state 143

  124 struct_field: IDENTIFIER . ':' type

    ':'  shift, and go to state 166


state 144

  120 struct_declaration: STRUCT IDENTIFIER '{' '}' .

    $default  reduce using rule 120 (struct_declaration)


state 145

  121 struct_declaration: STRUCT IDENTIFIER '{' struct_fields . '}'
  122 struct_fields: struct_fields . struct_field

    IDENTIFIER  shift, and go to state 143
    '}'         shift, and go to state 167

    struct_field  go to state 168


state 146

  123 struct_fields: struct_field .

    $default  reduce using rule 123 (struct_fields)


state 147

  111 fn_declaration: ASYNC FN IDENTIFIER '(' . parameters ')' type_declaration '{' program '}'
  112               | ASYNC FN IDENTIFIER '(' . parameters ')' type_declaration '{' '}'

    IDENTIFIER  shift, and go to state 108

    $default  reduce using rule 115 (parameters)

    parameters  go to state 169
    parameter   go to state 110


state 148

   66 if_statement: IF '(' expression ')' . '{' program '}'
   67             | IF '(' expression ')' . '{' program '}' ELSE '{' program '}'

    '{'  shift, and go to state 170


state 149

   68 while_statement: WHILE '(' expression ')' . '{' program '}'

    '{'  shift, and go to state 171


state 150

   69 for_statement: FOR '(' expression ';' . expression ';' expression ')' '{' program '}'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 172


state 151

   70 switch_statement: SWITCH '(' expression ')' . '{' cases '}'

    '{'  shift, and go to state 173


state 152

  119 parameter: IDENTIFIER ':' . type

    I8          shift, and go to state 125
    I16         shift, and go to state 126
    I32         shift, and go to state 127
    I64         shift, and go to state 128
    U8          shift, and go to state 129
    U16         shift, and go to state 130
    U32         shift, and go to state 131
    U64         shift, and go to state 132
    F32         shift, and go to state 133
    F64         shift, and go to state 134
    BOOL        shift, and go to state 135
    BYTE        shift, and go to state 136
    STR         shift, and go to state 137
    IDENTIFIER  shift, and go to state 138

    type  go to state 174


state 153

  113 lambda_declaration: '{' '(' parameters ')' . IN '{' program '}' '}'
  114                   | '{' '(' parameters ')' . ':' type IN '{' program '}' '}'

    IN   shift, and go to state 175
    ':'  shift, and go to state 176


state 154

  116 parameters: parameters ',' . parameter

    IDENTIFIER  shift, and go to state 108

    parameter  go to state 177


state 155

  107 argument: IDENTIFIER ':' . type
  119 parameter: IDENTIFIER ':' . type

    I8          shift, and go to state 125
    I16         shift, and go to state 126
    I32         shift, and go to state 127
    I64         shift, and go to state 128
    U8          shift, and go to state 129
    U16         shift, and go to state 130
    U32         shift, and go to state 131
    U64         shift, and go to state 132
    F32         shift, and go to state 133
    F64         shift, and go to state 134
    BOOL        shift, and go to state 135
    BYTE        shift, and go to state 136
    STR         shift, and go to state 137
    IDENTIFIER  shift, and go to state 138

    type  go to state 178


state 156

   96 expression: expression '(' ')' '{' . program '}'
   97           | expression '(' ')' '{' . '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24
    '}'         shift, and go to state 179

    '}'  [reduce using rule 1 (program)]

    program             go to state 180
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 157

   80 expression: expression '(' expression ')' .

    $default  reduce using rule 80 (expression)


state 158

   93 expression: expression '(' arguments ')' .

    $default  reduce using rule 93 (expression)


state 159

  105 arguments: arguments ',' . argument

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 181
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 182
    argument    go to state 183


state 160

   94 expression: expression '(' parameters ')' . '{' program '}'
   95           | expression '(' parameters ')' . '{' '}'

    '{'  shift, and go to state 184


state 161

   78 expression: expression '[' expression ']' .

    $default  reduce using rule 78 (expression)


state 162

   81 expression: expression '?' expression ':' . expression

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 185


state 163

   34 declaration: LET IDENTIFIER type_declaration ASSIGN expression .
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    '('       [reduce using rule 34 (declaration)]
    $default  reduce using rule 34 (declaration)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 164

   36 declaration: CONST IDENTIFIER type_declaration ASSIGN expression .
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    '('       [reduce using rule 36 (declaration)]
    $default  reduce using rule 36 (declaration)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 165

  109 fn_declaration: FN IDENTIFIER '(' parameters ')' . type_declaration '{' program '}'
  110               | FN IDENTIFIER '(' parameters ')' . type_declaration '{' '}'

    ':'  shift, and go to state 97

    $default  reduce using rule 31 (type_declaration)

    type_declaration  go to state 186


state 166

  124 struct_field: IDENTIFIER ':' . type

    I8          shift, and go to state 125
    I16         shift, and go to state 126
    I32         shift, and go to state 127
    I64         shift, and go to state 128
    U8          shift, and go to state 129
    U16         shift, and go to state 130
    U32         shift, and go to state 131
    U64         shift, and go to state 132
    F32         shift, and go to state 133
    F64         shift, and go to state 134
    BOOL        shift, and go to state 135
    BYTE        shift, and go to state 136
    STR         shift, and go to state 137
    IDENTIFIER  shift, and go to state 138

    type  go to state 187


state 167

  121 struct_declaration: STRUCT IDENTIFIER '{' struct_fields '}' .

    $default  reduce using rule 121 (struct_declaration)


state 168

  122 struct_fields: struct_fields struct_field .

    $default  reduce using rule 122 (struct_fields)


state 169

  111 fn_declaration: ASYNC FN IDENTIFIER '(' parameters . ')' type_declaration '{' program '}'
  112               | ASYNC FN IDENTIFIER '(' parameters . ')' type_declaration '{' '}'
  116 parameters: parameters . ',' parameter

    ')'  shift, and go to state 188
    ','  shift, and go to state 154


state 170

   66 if_statement: IF '(' expression ')' '{' . program '}'
   67             | IF '(' expression ')' '{' . program '}' ELSE '{' program '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 189
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 171

   68 while_statement: WHILE '(' expression ')' '{' . program '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 190
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 172

   69 for_statement: FOR '(' expression ';' expression . ';' expression ')' '{' program '}'
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ';'             shift, and go to state 191
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 173

   70 switch_statement: SWITCH '(' expression ')' '{' . cases '}'

    CASE     shift, and go to state 192
    DEFAULT  shift, and go to state 193

    cases  go to state 194
    case   go to state 195


state 174

  119 parameter: IDENTIFIER ':' type .

    $default  reduce using rule 119 (parameter)


state 175

  113 lambda_declaration: '{' '(' parameters ')' IN . '{' program '}' '}'

    '{'  shift, and go to state 196


state 176

  114 lambda_declaration: '{' '(' parameters ')' ':' . type IN '{' program '}' '}'

    I8          shift, and go to state 125
    I16         shift, and go to state 126
    I32         shift, and go to state 127
    I64         shift, and go to state 128
    U8          shift, and go to state 129
    U16         shift, and go to state 130
    U32         shift, and go to state 131
    U64         shift, and go to state 132
    F32         shift, and go to state 133
    F64         shift, and go to state 134
    BOOL        shift, and go to state 135
    BYTE        shift, and go to state 136
    STR         shift, and go to state 137
    IDENTIFIER  shift, and go to state 138

    type  go to state 197


state 177

  116 parameters: parameters ',' parameter .

    $default  reduce using rule 116 (parameters)


state 178

  107 argument: IDENTIFIER ':' type .
  119 parameter: IDENTIFIER ':' type .

    ')'       reduce using rule 107 (argument)
    ')'       [reduce using rule 119 (parameter)]
    ','       reduce using rule 107 (argument)
    ','       [reduce using rule 119 (parameter)]
    $default  reduce using rule 107 (argument)


state 179

   97 expression: expression '(' ')' '{' '}' .

    $default  reduce using rule 97 (expression)


state 180

   96 expression: expression '(' ')' '{' program . '}'

    '}'  shift, and go to state 198


state 181

   86 expression: IDENTIFIER .
  107 argument: IDENTIFIER . ':' type

    ':'  shift, and go to state 199

    $default  reduce using rule 86 (expression)


state 182

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression
  108 argument: expression .

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    $default  reduce using rule 108 (argument)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 183

  105 arguments: arguments ',' argument .

    $default  reduce using rule 105 (arguments)


state 184

   94 expression: expression '(' parameters ')' '{' . program '}'
   95           | expression '(' parameters ')' '{' . '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24
    '}'         shift, and go to state 200

    '}'  [reduce using rule 1 (program)]

    program             go to state 201
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 185

   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   81           | expression '?' expression ':' expression .
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    ADD             [reduce using rule 81 (expression)]
    SUB             [reduce using rule 81 (expression)]
    MUL             [reduce using rule 81 (expression)]
    DIV             [reduce using rule 81 (expression)]
    MOD             [reduce using rule 81 (expression)]
    AND             [reduce using rule 81 (expression)]
    OR              [reduce using rule 81 (expression)]
    XOR             [reduce using rule 81 (expression)]
    SHL             [reduce using rule 81 (expression)]
    SHR             [reduce using rule 81 (expression)]
    LOGIC_AND       [reduce using rule 81 (expression)]
    LOGIC_OR        [reduce using rule 81 (expression)]
    EQ              [reduce using rule 81 (expression)]
    NE              [reduce using rule 81 (expression)]
    LT              [reduce using rule 81 (expression)]
    GT              [reduce using rule 81 (expression)]
    LE              [reduce using rule 81 (expression)]
    GE              [reduce using rule 81 (expression)]
    ASSIGN          [reduce using rule 81 (expression)]
    ADD_ASSIGN      [reduce using rule 81 (expression)]
    SUB_ASSIGN      [reduce using rule 81 (expression)]
    MUL_ASSIGN      [reduce using rule 81 (expression)]
    DIV_ASSIGN      [reduce using rule 81 (expression)]
    MOD_ASSIGN      [reduce using rule 81 (expression)]
    BIT_AND_ASSIGN  [reduce using rule 81 (expression)]
    BIT_OR_ASSIGN   [reduce using rule 81 (expression)]
    BIT_XOR_ASSIGN  [reduce using rule 81 (expression)]
    BIT_SHL_ASSIGN  [reduce using rule 81 (expression)]
    BIT_SHR_ASSIGN  [reduce using rule 81 (expression)]
    '('             [reduce using rule 81 (expression)]
    '['             [reduce using rule 81 (expression)]
    '?'             [reduce using rule 81 (expression)]
    '.'             [reduce using rule 81 (expression)]
    $default        reduce using rule 81 (expression)

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 186

  109 fn_declaration: FN IDENTIFIER '(' parameters ')' type_declaration . '{' program '}'
  110               | FN IDENTIFIER '(' parameters ')' type_declaration . '{' '}'

    '{'  shift, and go to state 202


state 187

  124 struct_field: IDENTIFIER ':' type .

    $default  reduce using rule 124 (struct_field)


state 188

  111 fn_declaration: ASYNC FN IDENTIFIER '(' parameters ')' . type_declaration '{' program '}'
  112               | ASYNC FN IDENTIFIER '(' parameters ')' . type_declaration '{' '}'

    ':'  shift, and go to state 97

    $default  reduce using rule 31 (type_declaration)

    type_declaration  go to state 203


state 189

   66 if_statement: IF '(' expression ')' '{' program . '}'
   67             | IF '(' expression ')' '{' program . '}' ELSE '{' program '}'

    '}'  shift, and go to state 204


state 190

   68 while_statement: WHILE '(' expression ')' '{' program . '}'

    '}'  shift, and go to state 205


state 191

   69 for_statement: FOR '(' expression ';' expression ';' . expression ')' '{' program '}'

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 206


state 192

   73 case: CASE . expression ':' program

    ASYNC       shift, and go to state 45
    AWAIT       shift, and go to state 6
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23

    expression  go to state 207


state 193

   74 case: DEFAULT . ':' program

    ':'  shift, and go to state 208


state 194

   70 switch_statement: SWITCH '(' expression ')' '{' cases . '}'
   71 cases: cases . case

    CASE     shift, and go to state 192
    DEFAULT  shift, and go to state 193
    '}'      shift, and go to state 209

    case  go to state 210


state 195

   72 cases: case .

    $default  reduce using rule 72 (cases)


state 196

  113 lambda_declaration: '{' '(' parameters ')' IN '{' . program '}' '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 211
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 197

  114 lambda_declaration: '{' '(' parameters ')' ':' type . IN '{' program '}' '}'

    IN  shift, and go to state 212


state 198

   96 expression: expression '(' ')' '{' program '}' .

    $default  reduce using rule 96 (expression)


state 199

  107 argument: IDENTIFIER ':' . type

    I8          shift, and go to state 125
    I16         shift, and go to state 126
    I32         shift, and go to state 127
    I64         shift, and go to state 128
    U8          shift, and go to state 129
    U16         shift, and go to state 130
    U32         shift, and go to state 131
    U64         shift, and go to state 132
    F32         shift, and go to state 133
    F64         shift, and go to state 134
    BOOL        shift, and go to state 135
    BYTE        shift, and go to state 136
    STR         shift, and go to state 137
    IDENTIFIER  shift, and go to state 138

    type  go to state 213


state 200

   95 expression: expression '(' parameters ')' '{' '}' .

    $default  reduce using rule 95 (expression)


state 201

   94 expression: expression '(' parameters ')' '{' program . '}'

    '}'  shift, and go to state 214


state 202

  109 fn_declaration: FN IDENTIFIER '(' parameters ')' type_declaration '{' . program '}'
  110               | FN IDENTIFIER '(' parameters ')' type_declaration '{' . '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24
    '}'         shift, and go to state 215

    '}'  [reduce using rule 1 (program)]

    program             go to state 216
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 203

  111 fn_declaration: ASYNC FN IDENTIFIER '(' parameters ')' type_declaration . '{' program '}'
  112               | ASYNC FN IDENTIFIER '(' parameters ')' type_declaration . '{' '}'

    '{'  shift, and go to state 217


state 204

   66 if_statement: IF '(' expression ')' '{' program '}' .
   67             | IF '(' expression ')' '{' program '}' . ELSE '{' program '}'

    ELSE  shift, and go to state 218

    $default  reduce using rule 66 (if_statement)


state 205

   68 while_statement: WHILE '(' expression ')' '{' program '}' .

    $default  reduce using rule 68 (while_statement)


state 206

   69 for_statement: FOR '(' expression ';' expression ';' expression . ')' '{' program '}'
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    '('             shift, and go to state 88
    ')'             shift, and go to state 219
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 207

   73 case: CASE expression . ':' program
   78 expression: expression . '[' expression ']'
   79           | expression . '(' ')'
   80           | expression . '(' expression ')'
   81           | expression . '?' expression ':' expression
   92           | expression . '.' IDENTIFIER
   93           | expression . '(' arguments ')'
   94           | expression . '(' parameters ')' '{' program '}'
   95           | expression . '(' parameters ')' '{' '}'
   96           | expression . '(' ')' '{' program '}'
   97           | expression . '(' ')' '{' '}'
  100           | expression . athmetic_operator expression
  101           | expression . bitwise_operator expression
  102           | expression . logical_operator expression
  103           | expression . comparison_operator expression
  104           | expression . assignment_operator expression

    ADD             shift, and go to state 59
    SUB             shift, and go to state 60
    MUL             shift, and go to state 61
    DIV             shift, and go to state 62
    MOD             shift, and go to state 63
    AND             shift, and go to state 64
    OR              shift, and go to state 65
    XOR             shift, and go to state 66
    SHL             shift, and go to state 67
    SHR             shift, and go to state 68
    LOGIC_AND       shift, and go to state 69
    LOGIC_OR        shift, and go to state 70
    EQ              shift, and go to state 71
    NE              shift, and go to state 72
    LT              shift, and go to state 73
    GT              shift, and go to state 74
    LE              shift, and go to state 75
    GE              shift, and go to state 76
    ASSIGN          shift, and go to state 77
    ADD_ASSIGN      shift, and go to state 78
    SUB_ASSIGN      shift, and go to state 79
    MUL_ASSIGN      shift, and go to state 80
    DIV_ASSIGN      shift, and go to state 81
    MOD_ASSIGN      shift, and go to state 82
    BIT_AND_ASSIGN  shift, and go to state 83
    BIT_OR_ASSIGN   shift, and go to state 84
    BIT_XOR_ASSIGN  shift, and go to state 85
    BIT_SHL_ASSIGN  shift, and go to state 86
    BIT_SHR_ASSIGN  shift, and go to state 87
    ':'             shift, and go to state 220
    '('             shift, and go to state 88
    '['             shift, and go to state 89
    '?'             shift, and go to state 90
    '.'             shift, and go to state 91

    assignment_operator  go to state 92
    athmetic_operator    go to state 93
    bitwise_operator     go to state 94
    logical_operator     go to state 95
    comparison_operator  go to state 96


state 208

   74 case: DEFAULT ':' . program

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 221
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 209

   70 switch_statement: SWITCH '(' expression ')' '{' cases '}' .

    $default  reduce using rule 70 (switch_statement)


state 210

   71 cases: cases case .

    $default  reduce using rule 71 (cases)


state 211

  113 lambda_declaration: '{' '(' parameters ')' IN '{' program . '}' '}'

    '}'  shift, and go to state 222


state 212

  114 lambda_declaration: '{' '(' parameters ')' ':' type IN . '{' program '}' '}'

    '{'  shift, and go to state 223


state 213

  107 argument: IDENTIFIER ':' type .

    $default  reduce using rule 107 (argument)


state 214

   94 expression: expression '(' parameters ')' '{' program '}' .

    $default  reduce using rule 94 (expression)


state 215

  110 fn_declaration: FN IDENTIFIER '(' parameters ')' type_declaration '{' '}' .

    $default  reduce using rule 110 (fn_declaration)


state 216

  109 fn_declaration: FN IDENTIFIER '(' parameters ')' type_declaration '{' program . '}'

    '}'  shift, and go to state 224


state 217

  111 fn_declaration: ASYNC FN IDENTIFIER '(' parameters ')' type_declaration '{' . program '}'
  112               | ASYNC FN IDENTIFIER '(' parameters ')' type_declaration '{' . '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24
    '}'         shift, and go to state 225

    '}'  [reduce using rule 1 (program)]

    program             go to state 226
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 218

   67 if_statement: IF '(' expression ')' '{' program '}' ELSE . '{' program '}'

    '{'  shift, and go to state 227


state 219

   69 for_statement: FOR '(' expression ';' expression ';' expression ')' . '{' program '}'

    '{'  shift, and go to state 228


state 220

   73 case: CASE expression ':' . program

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 229
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 221

   74 case: DEFAULT ':' program .

    $default  reduce using rule 74 (case)


state 222

  113 lambda_declaration: '{' '(' parameters ')' IN '{' program '}' . '}'

    '}'  shift, and go to state 230


state 223

  114 lambda_declaration: '{' '(' parameters ')' ':' type IN '{' . program '}' '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 231
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 224

  109 fn_declaration: FN IDENTIFIER '(' parameters ')' type_declaration '{' program '}' .

    $default  reduce using rule 109 (fn_declaration)


state 225

  112 fn_declaration: ASYNC FN IDENTIFIER '(' parameters ')' type_declaration '{' '}' .

    $default  reduce using rule 112 (fn_declaration)


state 226

  111 fn_declaration: ASYNC FN IDENTIFIER '(' parameters ')' type_declaration '{' program . '}'

    '}'  shift, and go to state 232


state 227

   67 if_statement: IF '(' expression ')' '{' program '}' ELSE '{' . program '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 233
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 228

   69 for_statement: FOR '(' expression ';' expression ';' expression ')' '{' . program '}'

    LET         shift, and go to state 1
    CONST       shift, and go to state 2
    FN          shift, and go to state 3
    STRUCT      shift, and go to state 4
    ASYNC       shift, and go to state 5
    AWAIT       shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    RETURN      shift, and go to state 10
    BREAK       shift, and go to state 11
    CONTINUE    shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    NIL         shift, and go to state 15
    SWITCH      shift, and go to state 16
    BIT_INV     shift, and go to state 17
    NOT         shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    STRING      shift, and go to state 20
    INT         shift, and go to state 21
    DOUBLE      shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 24

    $default  reduce using rule 1 (program)

    program             go to state 234
    statements          go to state 26
    statement           go to state 27
    declaration         go to state 28
    if_statement        go to state 29
    while_statement     go to state 30
    for_statement       go to state 31
    switch_statement    go to state 32
    return_statement    go to state 33
    break_statement     go to state 34
    continue_statement  go to state 35
    expression          go to state 36
    fn_declaration      go to state 37
    lambda_declaration  go to state 38
    struct_declaration  go to state 39


state 229

   73 case: CASE expression ':' program .

    $default  reduce using rule 73 (case)


state 230

  113 lambda_declaration: '{' '(' parameters ')' IN '{' program '}' '}' .

    $default  reduce using rule 113 (lambda_declaration)


state 231

  114 lambda_declaration: '{' '(' parameters ')' ':' type IN '{' program . '}' '}'

    '}'  shift, and go to state 235


state 232

  111 fn_declaration: ASYNC FN IDENTIFIER '(' parameters ')' type_declaration '{' program '}' .

    $default  reduce using rule 111 (fn_declaration)


state 233

   67 if_statement: IF '(' expression ')' '{' program '}' ELSE '{' program . '}'

    '}'  shift, and go to state 236


state 234

   69 for_statement: FOR '(' expression ';' expression ';' expression ')' '{' program . '}'

    '}'  shift, and go to state 237


state 235

  114 lambda_declaration: '{' '(' parameters ')' ':' type IN '{' program '}' . '}'

    '}'  shift, and go to state 238


state 236

   67 if_statement: IF '(' expression ')' '{' program '}' ELSE '{' program '}' .

    $default  reduce using rule 67 (if_statement)


state 237

   69 for_statement: FOR '(' expression ';' expression ';' expression ')' '{' program '}' .

    $default  reduce using rule 69 (for_statement)


state 238

  114 lambda_declaration: '{' '(' parameters ')' ':' type IN '{' program '}' '}' .

    $default  reduce using rule 114 (lambda_declaration)
