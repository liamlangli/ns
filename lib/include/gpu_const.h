#pragma once

enum {
    GPU_SWAP_BUFFER_COUNT = 3,
    GPU_ATTRIBUTE_COUNT = 8,
    GPU_VERTEX_BUFFER_COUNT = 8,
    GPU_ATTACHMENT_COUNT = 4,
    GPU_BLOCK_UNIFORM_COUNT = 16,
    GPU_BLOCK_COUNT = 4,
    GPU_SHADER_TEXTURE_COUNT = 12,
    GPU_SHADER_SAMPLER_COUNT = 8,
    GPU_SHADER_BUFFER_COUNT = 4,

    GPU_RESOURCE_POOL_SIZE = 256,
    GPU_ATTACHMENTS_POOL_SIZE = 16,
    GPU_UB_SIZE = 4 * 1024 * 1024,
};

typedef enum gpu_pixel_format {
    _PIXELFORMAT_DEFAULT,    // value 0 reserved for default-init
    PIXELFORMAT_NONE,

    PIXELFORMAT_R8,
    PIXELFORMAT_R8SN,
    PIXELFORMAT_R8UI,
    PIXELFORMAT_R8SI,

    PIXELFORMAT_R16,
    PIXELFORMAT_R16SN,
    PIXELFORMAT_R16UI,
    PIXELFORMAT_R16SI,
    PIXELFORMAT_R16F,
    PIXELFORMAT_RG8,
    PIXELFORMAT_RG8SN,
    PIXELFORMAT_RG8UI,
    PIXELFORMAT_RG8SI,

    PIXELFORMAT_R32UI,
    PIXELFORMAT_R32SI,
    PIXELFORMAT_R32F,
    PIXELFORMAT_RG16,
    PIXELFORMAT_RG16SN,
    PIXELFORMAT_RG16UI,
    PIXELFORMAT_RG16SI,
    PIXELFORMAT_RG16F,
    PIXELFORMAT_RGBA8,
    PIXELFORMAT_SRGB8A8,
    PIXELFORMAT_RGBA8SN,
    PIXELFORMAT_RGBA8UI,
    PIXELFORMAT_RGBA8SI,
    PIXELFORMAT_BGRA8,
    PIXELFORMAT_RGB10A2,
    PIXELFORMAT_RG11B10F,
    PIXELFORMAT_RGB9E5,

    PIXELFORMAT_RG32UI,
    PIXELFORMAT_RG32SI,
    PIXELFORMAT_RG32F,
    PIXELFORMAT_RGBA16,
    PIXELFORMAT_RGBA16SN,
    PIXELFORMAT_RGBA16UI,
    PIXELFORMAT_RGBA16SI,
    PIXELFORMAT_RGBA16F,

    PIXELFORMAT_RGBA32UI,
    PIXELFORMAT_RGBA32SI,
    PIXELFORMAT_RGBA32F,

    PIXELFORMAT_DEPTH,
    PIXELFORMAT_DEPTH_STENCIL,

    // NOTE: don't put any new compressed format in front of here
    PIXELFORMAT_BC1_RGBA,
    PIXELFORMAT_BC2_RGBA,
    PIXELFORMAT_BC3_RGBA,
    PIXELFORMAT_BC3_SRGBA,
    PIXELFORMAT_BC4_R,
    PIXELFORMAT_BC4_RSN,
    PIXELFORMAT_BC5_RG,
    PIXELFORMAT_BC5_RGSN,
    PIXELFORMAT_BC6H_RGBF,
    PIXELFORMAT_BC6H_RGBUF,
    PIXELFORMAT_BC7_RGBA,
    PIXELFORMAT_BC7_SRGBA,
    PIXELFORMAT_PVRTC_RGB_2BPP,      // FIXME: deprecated
    PIXELFORMAT_PVRTC_RGB_4BPP,      // FIXME: deprecated
    PIXELFORMAT_PVRTC_RGBA_2BPP,     // FIXME: deprecated
    PIXELFORMAT_PVRTC_RGBA_4BPP,     // FIXME: deprecated
    PIXELFORMAT_ETC2_RGB8,
    PIXELFORMAT_ETC2_SRGB8,
    PIXELFORMAT_ETC2_RGB8A1,
    PIXELFORMAT_ETC2_RGBA8,
    PIXELFORMAT_ETC2_SRGB8A8,
    PIXELFORMAT_ETC2_RG11,
    PIXELFORMAT_ETC2_RG11SN,

    PIXELFORMAT_ASTC_4x4_RGBA,
    PIXELFORMAT_ASTC_4x4_SRGBA,

    _PIXELFORMAT_NUM,
} gpu_pixel_format;

typedef enum gpu_buffer_type {
    BUFFER_VERTEX,
    BUFFER_INDEX,
    BUFFER_UNIFORM,
    BUFFER_STORAGE
} gpu_buffer_type;

typedef enum gpu_texture_type {
    TEXTURE_2D,
    TEXTURE_CUBE,
    TEXTURE_3D,
    TEXTURE_ARRAY,
} gpu_texture_type;

typedef enum gpu_attribute_format {
    ATTRIBUTE_FORMAT_INVALID = 0,
    ATTRIBUTE_FORMAT_FLOAT,
    ATTRIBUTE_FORMAT_HALF,
    ATTRIBUTE_FORMAT_UINT,
    ATTRIBUTE_FORMAT_INT,
    ATTRIBUTE_FORMAT_USHORT,
    ATTRIBUTE_FORMAT_SHORT,
    ATTRIBUTE_FORMAT_BYTE,
    ATTRIBUTE_FORMAT_UBYTE,
} gpu_attribute_format;

typedef enum gpu_vertex_step {
    VERTEX_STEP_PER_VERTEX,
    VERTEX_STEP_PER_INSTANCE,
} gpu_vertex_step;

typedef enum gpu_uniform_layout {
    UNIFORM_LAYOUT_AUTO,
    UNIFORM_LAYOUT_NATIVE,
    UNIFORM_LAYOUT_STD140,
} gpu_uniform_layout;

typedef enum gpu_uniform_type {
    UNIFORM_FLOAT,
    UNIFORM_FLOAT2,
    UNIFORM_FLOAT3,
    UNIFORM_FLOAT4,
    UNIFORM_MAT3,
    UNIFORM_MAT4,
} gpu_uniform_type;

typedef enum gpu_texture_sample_type {
    TEXTURE_SAMPLE_TYPE_FLOAT,
    TEXTURE_SAMPLE_TYPE_DEPTH,
    TEXTURE_SAMPLE_TYPE_SINT,
    TEXTURE_SAMPLE_TYPE_UINT,
    TEXTURE_SAMPLE_TYPE_UNFILTERABLE_FLOAT,
} gpu_texture_sample_type;

typedef enum gpu_sampler_type {
    SAMPLER_TYPE_FILTERING,
    SAMPLER_TYPE_NEAREST,
    SAMPLER_TYPE_COMPARISON,
} gpu_sampler_type;

typedef enum gpu_filter {
    FILTER_AUTO,
    FILTER_NEAREST,
    FILTER_LINEAR,
} gpu_filter;

typedef enum gpu_wrap {
    WRAP_AUTO,
    WRAP_CLAMP_TO_EDGE,
    WRAP_REPEAT,
    WRAP_MIRRORED_REPEAT,
} gpu_wrap;

typedef enum gpu_compare_func {
    COMPARE_AUTO,
    COMPARE_NEVER,
    COMPARE_LESS,
    COMPARE_EQUAL,
    COMPARE_LESS_EQUAL,
    COMPARE_GREATER,
    COMPARE_NOT_EQUAL,
    COMPARE_GREATER_EQUAL,
    COMPARE_ALWAYS,
} gpu_compare_func;

typedef enum gpu_stencil_op {
    STENCIL_OP_KEEP,
    STENCIL_OP_ZERO,
    STENCIL_OP_REPLACE,
    STENCIL_OP_INCR_CLAMP,
    STENCIL_OP_DECR_CLAMP,
    STENCIL_OP_INVERT,
    STENCIL_OP_INCR_WRAP,
    STENCIL_OP_DECR_WRAP,
} gpu_stencil_op;

typedef enum gpu_blend_factor {
    BLEND_FACTOR_ZERO,
    BLEND_FACTOR_ONE,
    BLEND_FACTOR_SRC_COLOR,
    BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
    BLEND_FACTOR_SRC_ALPHA,
    BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
    BLEND_FACTOR_DST_COLOR,
    BLEND_FACTOR_ONE_MINUS_DST_COLOR,
    BLEND_FACTOR_DST_ALPHA,
    BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
    BLEND_FACTOR_SRC_ALPHA_SATURATED,
    BLEND_FACTOR_BLEND_COLOR,
    BLEND_FACTOR_ONE_MINUS_BLEND_COLOR,
    BLEND_FACTOR_BLEND_ALPHA,
    BLEND_FACTOR_ONE_MINUS_BLEND_ALPHA,
} gpu_blend_factor;

typedef enum gpu_blend_op {
    BLEND_OP_ADD,
    BLEND_OP_SUBTRACT,
    BLEND_OP_REVERSE_SUBTRACT,
    BLEND_OP_MIN,
    BLEND_OP_MAX,
} gpu_blend_op;

typedef enum gpu_color_mask {
    COLOR_MASK_NONE = 0,
    COLOR_MASK_R = 1 << 0,
    COLOR_MASK_G = 1 << 1,
    COLOR_MASK_B = 1 << 2,
    COLOR_MASK_A = 1 << 3,
    COLOR_MASK_RGB = 0x7,
    COLOR_MASK_ALL = 0xF,
} gpu_color_mask;

typedef enum gpu_primitive_type {
    PRIMITIVE_POINTS,
    PRIMITIVE_LINES,
    PRIMITIVE_LINE_STRIP,
    PRIMITIVE_LINE_LOOP,
    PRIMITIVE_TRIANGLES,
    PRIMITIVE_TRIANGLE_STRIP,
    PRIMITIVE_TRIANGLE_FAN,
} gpu_primitive_type;

typedef enum gpu_index_type {
    INDEX_NONE = 0,
    INDEX_UINT16,
    INDEX_UINT32,
} gpu_index_type;

typedef enum gpu_face_winding {
    FACE_WINDING_CCW,
    FACE_WINDING_CW,
} gpu_face_winding;

typedef enum gpu_cull_mode {
    CULL_NONE,
    CULL_FRONT,
    CULL_BACK,
} gpu_cull_mode;

typedef enum gpu_load_action {
    LOAD_ACTION_CLEAR,
    LOAD_ACTION_LOAD,
    LOAD_ACTION_DONTCARE,
} gpu_load_action;

typedef enum gpu_store_action {
    STORE_ACTION_STORE,
    STORE_ACTION_DONTCARE,
} gpu_store_action;

typedef enum gpu_usage {
    USAGE_DEFAULT = 0,
    USAGE_MANAGED = 1,
    USAGE_PRIVATE = 1 << 1,
    USAGE_SHARED = 1 << 2,
    USAGE_MEMORYLESS = 1 << 3
} gpu_usage;

typedef enum gpu_texture_usage {
    TEXTURE_USAGE_DEFAULT = 0,
    TEXTURE_USAGE_READ = 1,
    TEXTURE_USAGE_WRITE = 1 << 1,
    TEXTURE_USAGE_RENDER_TARGET = 1 << 2
} gpu_texture_usage;